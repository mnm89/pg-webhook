services:
  postgres:
    image: postgres:${POSTGRES_VERSION:-latest}
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: >
      postgres -c wal_level=logical
               -c max_wal_senders=10
               -c max_replication_slots=10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-db} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      postgres:
        condition: service_healthy

  app:
    build: ./app
    container_name: listener
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-db}?application_name=pg-webhook
      PUBLICATION_PREFIX: ${PUBLICATION_PREFIX:-pg_webhook_pub}
      SLOT_NAME: ${SLOT_NAME:-pg_webhook_slot}
      SCHEMA_NAMES: ${SCHEMA_NAMES:-public}
      WEBHOOKS_API_KEY: ${WEBHOOKS_API_KEY:-pg_webhook_secret}
      LOG_LEVELS: ${LOG_LEVELS:-log,error,warn,fatal}
      LOG_JSON: ${LOG_JSON:-true}
      NODE_ENV: ${NODE_ENV:-production}
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
